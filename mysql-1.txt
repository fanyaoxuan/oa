字符串函数：
upper()
lower()
length()
initcap()
substr();  select substr('helloworld',1,5) from dual;

数值函数：
round() 不写小数位，保留整数四舍五入
trunc() 只截取不进位
mod() 求模

日期函数：
伪列 sysdate/systimestamp

日期的计算：
sysdate -7  

准确的日期处理函数：
add_months()  增加月数
months_between() 指定两个日期之间的月数
last_day() 取得所在月的最后一天
next_day（） 返回指定日期的下个星期



转换函数：
to_char(数字,格式) 
	实现日期数据的拆分
to_char(sysdate,'yyyy')  取出年
格式化数字：
to_char(14345,'L999,999,999') from dual;


to_date(字符串，格式)
select to_date('1991-02-20','yyyyMMdd') from dual;

to_number(字符串)  转换为数字

通用函数：
nvl() 如果为null，则使用默认值
decode()


多表查询：
内连接 inner join on
左外连接 left join on
右外连接 right join on
全连接 full join
自然连接 nature join on  USING 设置条件
交叉连接 cross join



数据集合操作（两个查询结果的列必须相同）：
union  去重
union all
intsect   作用：  取交集
minus  作用：取差集


分组统计规则：
group by  必须放在order by 之前
没有group by子句则select中只能使用统计函数， 不能出现其他字段
含有group by子句，select中只能出现group by中出现的字段
统计函数允许嵌套，但select子句中不能出现任何字段



分组统计查询group by...having

统计函数
count()  不记录null值
max()
min()
avg()
sum()


where 发生在group by之前，where子句不允许使用统计函数
having 发生在group by 之后，having可以使用统计函数


NOT IN 中不能为null  否则不会有任何结果

=any 与in相同
>any  大于其中的最小值即可
<any  小于最大的值即可

>all 大于最大的
<all 小于最小的

多表查询与子查询：
子查询解决了多表查询的性能问题（笛卡尔积问题）

insert into 表名（） values ();

‘字符串’  数字  日期

update myemp  set 列明=‘值’
where 条件

更新时，其他的用户不能同时修改


删除操作：
delete from 表明 where 条件

事务处理：
commit
rollback


死锁形成，两个session同时更新某条数据，而不进行提交



数据伪列：
rownum/rowid
rownum是动态生成的，不是固定的
	作用：取出第一行记录
	      取出前n行记录
实现分页的重要依据，
select *
from (
	select rownum rn,e.*
	from emp
	where rownum <= 10
)
where rn > 5;


rowid:物理编号
AAAMfP	      AAE	    AAAAAg	AAA
数据对象编号  保存文件编号   保存的块号   行号


表的创建与操作：
数据类型：
varchar2(n)： n表示最大的长度，一般保存比较小的内容（200字以内建议生用）
number(n,m)
date
clob  大文本数据，4G是顶
blob 二进制数据，二进制数据


数据字典：
用户级别： user_*开头
管理员级别：dba_*开头
全部级别：all_*开头

oracle中执行了DDL操作，所有未提交的事务将自动提交


截断表：
truncate table 表名  不会恢复数据


drop table emp;  删除表
drop table emp  purge;强制删除数据表(不能闪回)

闪回技术（flash back）：类似windows的回收站

select * from user_recyclebin;
通过回收站，恢复已删除的表
flashback table 表名 to before drop;(从之前删除的状态恢复)


删除回收站的数据表：
purge table emp; 删除回收站中的一张表
purge recyclebin;


修改表结构：
alter tabel 表名
add （列名  数据类型 default 默认值）；
增加列后所有的值为空值

修改列名
alter table 表名
modify (列名 数据类型 default 默认值) 

alter table 表名
drop column 列名



脚本
*.sql
--删除表结构
DROP table member purge;
--创建表
create tabel member();
--测试数据
insert into 表  values()
--事务提交
commit




约束：
	约束的信息通过表user_constraints查询
	也可以通过user_cons_columns查看详细信息

非空约束（not null）：
	create tabel member(
		mid number,
		name varchar2(20) not null
	) 
唯一约束(unique,nk):
	create table member(
		mid number,
		email varchar2(20) unique
	) 
	
	空值并不受唯一约束的限定。
	create table member(
		mid number,
		email varchar2(20),
		constraint 约束名 unique(列名)
	) 
	
主键约束(primary key,pk)
	一张表一个主键
	create table member(
		mid number,
		email varchar2(20),
		constraint 约束名 primary key(列名)
	) 
	一张表多个主键（复合主键）
	create table member(
		mid number,
		email varchar2(20),
		constraint 约束名 primary key(列名，列名)
	) 
检查约束（check,ck）
	create tabel member(
		mid number,
		age number(3),
		constraint 约束名 check(age between 0 and 250)
	)

外键约束（foreign key，fk）
	create tabel member(
		mid number,
		age number(3),
		deptno number,
		constraint 约束名 foreign key(deptno) refrences dept(deptno)
	)


	强制删除存在外键关系的表：
	drop table 表名 cascade constraint;

	数据的级联操作：
	create tabel member(
		mid number,
		age number(3),
		deptno number,
		constraint 约束名 foreign key(deptno) 
		refrences dept(deptno) on delete cascade;
	)

	级联更新：
	create tabel member(
		mid number,
		age number(3),
		deptno number,
		constraint 约束名 foreign key(deptno) 
		refrences dept(deptno) on delete set null;
	)

修改约束：
alter table emp
modify ()

exists()  针对一个数据行进行验证
not exists()



复合主键：
constraint pk_main primary key(no,no);


检查约束：
constraint ck_main check(检查条件)；

外键约束：
constraint fk_main freign key (no) references emp(no);

强制删除(忽略外键关系)：
drop table  test casade constraint;

序列：
表 约束 序列 同时出现

自动增长列
create sequence 序列名
drop sequence 序列名

序列名称
min_value最小值
max_value最大值
increment_by 步长
cy   是否循环
cache_size  缓存
last_number  最后一次（缓存*步长）

序列对象.nextval   取下一个序列
序列对象.currval  取当前的序列

alter sequence myseq
set increment_by 2


同义词：在其他用户中可以查询表

drop synonym 同义词名称
create synonym 同义词名称 for 表名
create synonym myemp for scott.emp

如果同义词需要在所有的用户下使用需要创建public同义词
create public sysnoym 同义词名称 for 表名


视图的定义：复杂查询的sql语句对象，最要用来简化查询
视图保存的是临时数据

create view 视图名 as 子查询
create or replace  view 视图名 
as 子查询（如果不存在则创建，存在则替换）
with check option  检查视图条件
with read only 只读视图



索引：  当修改字段频繁时该字段不适合使用索引
create index 索引名 on 表名（字段）

set autotrace on


创建用户
create user 用户名 identified by 密码
grant create sesson to 用户名
grant connect,resource to 用户名


alter user 用户 identified by 密码
alter user 用户 password expire
alter user 用户 account lock
alter user 用户 account unlock 

grant select,insert on scott.emp to 用户


回收权限
revoke connect,resource from 用户名
drop user 用户名 casace


三大范式：
字段不可再分（比如date日期不能分）
两个列之间不要存在关系（需要形成多对多的关系）


索引的原则：
不要有的字段都创建索引
update操作多不建议创建索引
字段少不创建索引


索引碎片需要手动维护。


pl/sql由3部分组成：
声明部分declare  

执行部分  begin

异常部分  exception
end；


执行pl/sql   F8或/执行
set serverout on  显示结果


dbms_output.put_line();  在控制台输出

赋值  :=

i  constant   number := 100;  定义一个常量


pl/sql注意事项
pl/sql不能将数据直接查出来 需要将查出来的数据保存到变量中
在select 语句中使用into将每个值赋值给变量


i  test.empno%type;  定义一个变量i 与empno字段的类型一致


i test%rowtype   :  i表示的就是一行(i.字段)

varray 可变数组

type 类型名称 is varray(数组长度) of varchar2(10)  在这个类型中保存一个varchar的数组
必须使用变量指向这个类型数组
v_str strings:= strings('','','');


table  类似一个永久的数组
type tables is table of varchar2(10)
index by binary_integer  下标无线
必须使用变量指向



record  类似java中的集合
type v_record is record(
	id number,
	v_student test%rowtype
)


流程控制：
if()   then 
elsif()   then
elsif()   then 
。。。。
else   then

end if;


循环控制：
loop
	i :=i+1;
	if(i =5) then exit；（exit when i=5）

end loop
使用  《outer》表示外循环  《inner》表示内循环

exit outer when i= 5  退出外循环



for循环
for i  in reverse(倒序) 1..5 loop

end loop;

while i<5  loop

end loop;



异常处理 ：
预定义异常
非预定义异常
自定义异常

declare 
begin
exception
	when   then
	when  then
	when others then
	
sqlcode  错误代码
sqlerrm 错误消息




游标 就是用来暂存查询出的多条记录
cursor c_name is select * from emp;

带参数的游标
cursor v_name(v_cla_id number) is select * from emp where id = c_cla_id;
r_name emp%rowtype;

打开游标
open c_name

提取数据：
fetch c_name into r_name

关闭游标
close c_name



存储过程：
主要包含四类：
	过程：无返回结果
	函数：又返回结果
	包：定义过程和函数的地方
	触发器：事件触发执行操作


不带参数存储过程：
create or replace proceduces cunchuguocheng   is 
	v_sex varchar(18) := '男';
begin
	insert into 
end cunchuguocheng;

带参数的存储过程：
create or replace proceduces cunchuguocheng   canshu (
	id varchar2;
	name varchar2;
	sex number;
) is

begin

end cunchuguocheng;


函数：
create or replace function fun  return number is

begin 
end;

create or replace function fun(v_sal number) return number is
begin
end;



包：  包头 和包体
包头：

